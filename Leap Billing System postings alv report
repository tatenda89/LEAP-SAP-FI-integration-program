*&---------------------------------------------------------------------*
*& Report  ZTEST_PROG
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  ZCASH_JOURNAL_POSTINGS.


TABLES: TCJ_DOCUMENTS.

data : begin of previous ,

previous(6),
previous1(6),

end of previous.
data: previous1 like STANDARD TABLE OF previous WITH HEADER LINE.
data: inperiod(6).

TYPE-POOLS: slis.
DATA: it_fieldcat  TYPE slis_t_fieldcat_alv,
wa_fieldcat  TYPE slis_fieldcat_alv.


SELECTION-SCREEN begin of block block4 with frame title text-002.


  SELECT-OPTIONS DOC_DATE FOR TCJ_DOCUMENTS-DOCUMENT_DATE.


SELECTION-SCREEN end of block block4.

TYPES: BEGIN OF equi_mas,
  AUFNR TYPE AUFNR,
  EQUNR TYPE EQUNR,
  END OF equi_mas.

DATA: LT_equi_mas type TABLE OF equi_mas,
      LS_equi_mas type equi_mas.

DATA: RSNUM TYPE RSNUM,
      EQUNR TYPE EQUNR.







TYPES: BEGIN OF stQ,
*MANDT type ZFUEL_MILEAGE_M-MANDT,
"""""""""""""""""""""""""""""""""""
CAJO_NUMBER TYPE TCJ_DOCUMENTS-CAJO_NUMBER,
POSTING_NUMBER TYPE TCJ_DOCUMENTS-POSTING_NUMBER,
CURRENCY TYPE TCJ_DOCUMENTS-CURRENCY,
H_RECEIPTS TYPE TCJ_DOCUMENTS-H_RECEIPTS,
H_NET_AMOUNT TYPE TCJ_DOCUMENTS-H_NET_AMOUNT,
H_NET_PAYMENT_WT TYPE TCJ_DOCUMENTS-H_NET_PAYMENT_WT,
DOCUMENT_DATE TYPE TCJ_DOCUMENTS-DOCUMENT_DATE,
POSTING_DATE TYPE TCJ_DOCUMENTS-POSTING_DATE,
DOCUMENT_STATUS TYPE TCJ_DOCUMENTS-DOCUMENT_STATUS,
ACCOUNTANT TYPE TCJ_DOCUMENTS-ACCOUNTANT,
D_POSTING_NUMB TYPE TCJ_DOCUMENTS-D_POSTING_NUMB,
MEANS_OF_PAYMENT TYPE TCJ_DOCUMENTS-MEANS_OF_PAYMENT,
TEXT1 TYPE TCJ_DOCUMENTS-TEXT1,
TEXT2 TYPE TCJ_DOCUMENTS-TEXT2,
SECCO TYPE TCJ_DOCUMENTS-SECCO,
"""""""""""""""""""""""""""""""""""
END OF stQ.

DATA: itQ TYPE TABLE OF stQ .
DATA : waQ TYPE stQ,
       waQ1 TYPE stQ.


DATA: result type ICL_MILEAGE,
      mileage_diff type GAMNG ,
      count type i,
      countt type i,
      table_index type i.

DATA: fuel_mileage type i,
      fuel_mileage1 type i,
      fuel_mileage2 type i.

DATA: opening_mileage type i,
      closing_mileage type i.

"DATA: consumption type i.
DATA: consumption type ENMNG.

DATA: actual_fuel type ENMNG.

"DATE"""""""""""""""""""""
DATA: dstti type i.

DATA: BEGIN OF date_month,
      DATE_SENT_TO_TRA type DATUM,
      END OF date_month.
"""""""""""""""""""""""""

""""""""""""""""""""""""""""""""
DATA: make type HERST,
model type TYPBZ,
location type SWERK,
department type GEWRK,
ILOAN type ILOAN.
""""""""""""""""""""""""""""""""
DATA: NUMBER  TYPE  BAPI_ALM_ORDER_HEADER_E-ORDERID,
      ES_HEADER LIKE  BAPI_ALM_ORDER_HEADER_E,
      RETURN  TYPE TABLE OF BAPIRET2.

""""""""""""""""""""""""""""""""
DATA: month type string.

DATA: gr_sorts TYPE REF TO cl_salv_sorts.
DATA: gr_agg TYPE REF TO cl_salv_aggregations.
DATA: gr_columns TYPE REF TO cl_salv_columns_table.

DATA: gr_column TYPE REF TO cl_salv_column_table.

DATA: color TYPE lvc_s_colo.

DATA: gr_table TYPE REF TO cl_salv_table.



start-OF-SELECTION.






select
CAJO_NUMBER
POSTING_NUMBER
CURRENCY
H_RECEIPTS
H_NET_AMOUNT
H_NET_PAYMENT_WT
DOCUMENT_DATE
POSTING_DATE
DOCUMENT_STATUS
ACCOUNTANT
D_POSTING_NUMB
MEANS_OF_PAYMENT
TEXT1
TEXT2
SECCO
INTO CORRESPONDING FIELDS OF TABLE itQ FROM TCJ_DOCUMENTS
where DOCUMENT_DATE IN DOC_DATE and SECCO = 'LEAP'.






*loop at LT_equi_mas into LS_equi_mas.
*  select single RSNUM into RSNUM from RESB where AUFNR = LS_equi_mas-AUFNR.
*
*  select single EQUNR into EQUNR from AFIH where AUFNR = LS_equi_mas-AUFNR.
*endloop.

"Actual Loop to be used
Loop at itQ INTO waQ.

ENDLOOP.

data : lv_count type i.

lv_count = lines( itQ ).


*Append waQ to  itQ.

" FOR MY OO ALV
DATA: MYALV TYPE REF TO CL_SALV_TABLE,
      MYFUNCTIONS TYPE REF TO CL_SALV_FUNCTIONS_LIST,
      MYCOLUMNS TYPE REF TO CL_SALV_COLUMNS_TABLE,
      lo_column            TYPE REF TO cl_salv_column,
      lex_not_found        TYPE REF TO cx_salv_not_found.
*      SEQNR TYPE PA0001-SEQNR.

DATA: lo_header  TYPE REF TO cl_salv_form_layout_grid,
          lo_h_label TYPE REF TO cl_salv_form_label,
          lo_h_flow  TYPE REF TO cl_salv_form_layout_flow.

DATA: lo_footer  TYPE REF TO cl_salv_form_layout_grid,
          lo_f_label TYPE REF TO cl_salv_form_label,
          lo_f_flow  TYPE REF TO cl_salv_form_layout_flow.

*   header object
    CREATE OBJECT lo_header.
*   information in Bold
    lo_h_label = lo_header->create_label( row = 1 column = 1 ).
    "lo_h_label->set_text( 'Header in Bold' ).
    lo_h_label->set_text( 'POSTINGS FROM LEAP BILLING SYSTEM'  ).
*   information in tabular format
    lo_h_flow = lo_header->create_flow( row = 2  column = 1 ).
    lo_h_flow->create_text( text = 'Report generated by:' ).
*
    lo_h_flow = lo_header->create_flow( row = 2  column = 2 ).
    lo_h_flow->create_text( text = SY-UNAME ).
*
    lo_h_flow = lo_header->create_flow( row = 3  column = 1 ).
    lo_h_flow->create_text( text = SY-DATUM ).

    lo_h_flow = lo_header->create_flow( row = 3  column = 2 ).
    lo_h_flow->create_text( text = SY-UZEIT ).

    lo_h_flow = lo_header->create_flow( row = 4  column = 1 ).
    lo_h_flow->create_text( text = 'Number of posted records for period:' ).

    lo_h_flow = lo_header->create_flow( row = 4  column = 2 ).
    lo_h_flow->create_text( text = lv_count ).



TRY .

*try.
call method cl_salv_table=>factory
*  exporting
*    list_display   = IF_SALV_C_BOOL_SAP=>FALSE
*    r_container    =
*    container_name =
  importing
    r_salv_table   = MYALV
  changing
    t_table        = itQ"IT_PA0001"IT_PA0008
    .
* catch cx_salv_msg .
*endtry.


CATCH CX_SALV_MSG.

ENDTRY.
*footer object
    CREATE OBJECT lo_footer.
*
*   information in bold
    lo_f_label = lo_footer->create_label( row = 1 column = 1 ).


 DATA: lo_aggrs TYPE REF TO cl_salv_aggregations.
*
    lo_aggrs = MYALV->get_aggregations( ).
*
*   Add TOTAL for COLUMN H_RECEIPTS
    TRY.
        CALL METHOD lo_aggrs->add_aggregation
          EXPORTING
            columnname  = 'H_RECEIPTS'
            aggregation = if_salv_c_aggregation=>total.
      CATCH cx_salv_data_error .                        "#EC NO_HANDLER
      CATCH cx_salv_not_found .                         "#EC NO_HANDLER
      CATCH cx_salv_existing .                          "#EC NO_HANDLER
    ENDTRY.
*   Add TOTAL for COLUMN H_NET_AMOUNT
    TRY.
        CALL METHOD lo_aggrs->add_aggregation
          EXPORTING
            columnname  = 'H_NET_AMOUNT'
            aggregation = if_salv_c_aggregation=>total.
      CATCH cx_salv_data_error .                        "#EC NO_HANDLER
      CATCH cx_salv_not_found .                         "#EC NO_HANDLER
      CATCH cx_salv_existing .                          "#EC NO_HANDLER
    ENDTRY.
*   Add TOTAL for COLUMN H_NET_PAYMENT_WT
    TRY.
        CALL METHOD lo_aggrs->add_aggregation
          EXPORTING
            columnname  = 'H_NET_PAYMENT_WT'
            aggregation = if_salv_c_aggregation=>total.
      CATCH cx_salv_data_error .                        "#EC NO_HANDLER
      CATCH cx_salv_not_found .                         "#EC NO_HANDLER
      CATCH cx_salv_existing .                          "#EC NO_HANDLER
    ENDTRY.
*   Bring the total line to top
    "lo_aggrs->set_aggregation_before_items( ).

lo_f_label->set_text( 'END-OF-REPORT' ).
*   Online footer
    MYALV->set_end_of_list( lo_footer ).
*
*   Footer in print
    MYALV->set_end_of_list_print( lo_footer ).

*   set the top of list using the header for Online.
    MYALV->set_top_of_list( lo_header ).
*
*   set the top of list using the header for Print.
    MYALV->set_top_of_list_print( lo_header ).

"""""""""""""set column name"""""""""""""""
     data:lr_column  type ref to cl_salv_column_table.
     data:wa_color type lvc_s_colo.
*     TRY.
*        CALL METHOD gr_columns->SET_COLOR_COLUMN
*          EXPORTING
*            columnname  = 'H_RECEIPTS'.
*            aggregation = if_salv_c_aggregation=>total.
*      CATCH cx_salv_data_error .                        "#EC NO_HANDLER
*      CATCH cx_salv_not_found .                         "#EC NO_HANDLER
*      CATCH cx_salv_existing .                          "#EC NO_HANDLER
*    ENDTRY.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
*gr_column ?= gr_columns->get_column( 'H_RECEIPTS' ).
*
*color-col = '4'.
*
*color-int = '1'.
*
*color-inv = '0'.
*
*gr_column->set_color( color ).

*gr_sorts = MYALV->get_sorts( ).
*
*gr_sorts->add_sort( columnname = 'H_RECEIPTS' subtotal = abap_true ).
*
*gr_agg = MYALV->get_aggregations( ).
*
*gr_agg->add_aggregation( 'H_RECEIPTS' ).

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

MYCOLUMNS = MYALV->GET_COLUMNS( ).

TRY.

      lr_column ?= MYCOLUMNS->get_column( 'AUFNR' ).
      lr_column->set_key( ).

      wa_color-col = '6'.
      wa_color-int = '1'.
      lr_column ?= MYCOLUMNS->get_column( 'consumption' ).
      lr_column->set_color( wa_color ).
      CATCH CX_SALV_NOT_FOUND.
        ENDTRY.

""""change column names""""""""""""""""""""""""""""""""""""""""



  try.
      lr_column ?= MYCOLUMNS->get_column( 'TEXT1' ).
      lr_column->set_short_text( 'Leap Ref' ).
      lr_column->set_medium_text( 'Leap Reference' ).
      lr_column->set_long_text( 'Leap Reference' ).
    catch cx_salv_not_found.                            "#EC NO_HANDLER
  endtry.

  try.
      lr_column ?= MYCOLUMNS->get_column( 'TEXT2' ).
      lr_column->set_short_text( 'Cashier' ).
      lr_column->set_medium_text( 'Cashier' ).
      lr_column->set_long_text( 'Cashier' ).
    catch cx_salv_not_found.                            "#EC NO_HANDLER
  endtry.


MYCOLUMNS->SET_OPTIMIZE( ).



*" Change ALV Columns Name ( Short, medium and Long text)
*  "-----------------------------------------------------------"
*  TRY.
*      lo_column = MYCOLUMNS->get_column( 'acc_name' ).
*      lo_column->set_short_text( 'modelski' ).
*      lo_column->set_medium_text( 'modelski' ).
*      lo_column->set_long_text( 'modelski' ).
*    CATCH cx_salv_not_found INTO lex_not_found.
*      " write some error handling
*  ENDTRY.






MYFUNCTIONS = MYALV->GET_FUNCTIONS( ).
MYFUNCTIONS->SET_ALL( ).
call method MYALV->DISPLAY.

*DATA:
*it_result_tab   TYPE STANDARD TABLE OF STRING,"TABLES PARAM
*wa_result_tab   LIKE LINE OF it_result_tab,
*PERNR2  TYPE  P_PERNR,
*PABRJ TYPE  PNPPABRJ.
*
*PERNR2 = pernr.
*PABRJ = '2013'.





*call function 'HR_GET_PAYROLL_RESULTS'
*  exporting
*    pernr                               = PERNR2
**   PERMO                               = 01
*    pabrj                               = PABRJ
**   PABRP                               =
**   PABRJ_END                           =
**   PABRP_END                           =
**   INPER_LST                           =
**   INPER_ACT                           =
**   ACTUAL                              =
**   WAERS                               =
**   ARCH_TOO                            =
*  tables
*    result_tab                          = it_result_tab
* EXCEPTIONS
*   NO_RESULTS                          = 1
*   ERROR_IN_CURRENCY_CONVERSION        = 2
*   T500L_ENTRY_NOT_FOUND               = 3
*   PERIOD_MISMATCH_ERROR               = 4
*   T549Q_ENTRY_NOT_FOUND               = 5
*   INTERNAL_ERROR                      = 6
*   WRONG_STRUCTURE_OF_RESULT_TAB       = 7
*   OTHERS                              = 8
*          .
*if sy-subrc <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*endif.


*SELECT pernr ename FROM PA0001 INTO TABLE IT_PA0001. "where pernr = pernr.

*select single SEQNR INTO SEQNR FROM PA0001 WHERE PERNR = PERNR.

*DATA: jb type string.
*
*select single LGTXT FROM t512t into jb where LGART = wagetype.
*DATA: nutter type PAD_AMT7S.

*SELECT SINGLE BETRG INTO nutter from PA0014 where pernr = pernr and begda = begda and endda = endda.
*
*if sy-subrc eq 4.
* SELECT SINGLE BETRG INTO nutter from PA0015 where pernr = pernr and begda = begda and endda = endda.
*endif.

*loop at IT_PA0001 into WA_PA0001.
*
*"WA_PA0001-nutter = jb.
*
*WA_PA0001-nutter = nutter.
*MODIFY IT_PA0001 from WA_PA0001 index sy-tabix.
*endloop.
"append wa_PA0001 TO IT_PA0001.
"delete ADJACENT DUPLICATES FROM IT_PA0001 COMPARING pernr ename nutter.
  "WHERE sprsl = sy-langu.
 " AND molga = '56' .

"GET pernr.

"""""""""""""""""""" reading payroll data """"""""""""""""""""""""""""""


*tables: PA0014.

*SELECT-OPTIONS S_dates FOR PA0014-BEGDA.




*call function 'BAPI_GET_PAYROLL_RESULT_LIST'
*  exporting
*    employeenumber       =
**   FROMDATE             = '18000101'
**   TODATE               = '99991231'
** IMPORTING
**   RETURN               =
*  tables
*    results              =
*          .

*DATA: EMPLOYEENUMBER  TYPE  PC200-PERNR,
*      SEQUENCENUMBER  TYPE  PC261-SEQNR,
*       ref_payresult TYPE pay99_result .
*
*
* SEQUENCENUMBER = SEQNR.
* EMPLOYEENUMBER = PERNR.
*
*call function 'PYXX_READ_PAYROLL_RESULT'
*  exporting
*    CLUSTERID                          = 'RX'
*    employeenumber                     = EMPLOYEENUMBER
*    sequencenumber                     = SEQUENCENUMBER
**   READ_ONLY_BUFFER                   = ' '
**   READ_ONLY_INTERNATIONAL            = ' '
**   ARC_GROUP                          = ' '
**   CHECK_READ_AUTHORITY               = 'X'
**   FILTER_CUMULATIONS                 = 'X'
**   CLIENT                             =
** IMPORTING
**   VERSION_NUMBER_PAYVN               =
**   VERSION_NUMBER_PCL2                =
*  changing
*    payroll_result                     = ref_payresult
* EXCEPTIONS
*   ILLEGAL_ISOCODE_OR_CLUSTERID       = 1
*   ERROR_GENERATING_IMPORT            = 2
*   IMPORT_MISMATCH_ERROR              = 3
*   SUBPOOL_DIR_FULL                   = 4
*   NO_READ_AUTHORITY                  = 5
*   NO_RECORD_FOUND                    = 6
*   VERSIONS_DO_NOT_MATCH              = 7
*   ERROR_READING_ARCHIVE              = 8
*   ERROR_READING_RELID                = 9
*   OTHERS                             = 10
*          .
*if sy-subrc <> 0.
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*endif.

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
*
**   header object
*    CREATE OBJECT lo_header.
**   information in Bold
*    lo_h_label = lo_header->create_label( row = 1 column = 1 ).
*    "lo_h_label->set_text( 'Header in Bold' ).
*    lo_h_label->set_text( wage_type_text  ).
**   information in tabular format
*    lo_h_flow = lo_header->create_flow( row = 2  column = 1 ).
*    lo_h_flow->create_text( text = 'Report generated by:' ).
**
*    lo_h_flow = lo_header->create_flow( row = 2  column = 2 ).
*    lo_h_flow->create_text( text = SY-UNAME ).
**
*    lo_h_flow = lo_header->create_flow( row = 3  column = 1 ).
*    lo_h_flow->create_text( text = SY-DATUM ).
*
*    lo_h_flow = lo_header->create_flow( row = 3  column = 2 ).
*    lo_h_flow->create_text( text = SY-UZEIT ).
*
*
*
*TRY .
*
**try.
*call method cl_salv_table=>factory
**  exporting
**    list_display   = IF_SALV_C_BOOL_SAP=>FALSE
**    r_container    =
**    container_name =
*  importing
*    r_salv_table   = MYALV
*  changing
*    t_table        = IT_PA0001"IT_PA0008
*    .
** catch cx_salv_msg .
**endtry.
*
*
*CATCH CX_SALV_MSG.
*
*ENDTRY.
**footer object
*    CREATE OBJECT lo_footer.
**
**   information in bold
*    lo_f_label = lo_footer->create_label( row = 1 column = 1 ).
*
*
* DATA: lo_aggrs TYPE REF TO cl_salv_aggregations.
**
*    lo_aggrs = MYALV->get_aggregations( ).
**
**   Add TOTAL for COLUMN NETWR
*    TRY.
*        CALL METHOD lo_aggrs->add_aggregation
*          EXPORTING
*            columnname  = 'BETRG'
*            aggregation = if_salv_c_aggregation=>total.
*      CATCH cx_salv_data_error .                        "#EC NO_HANDLER
*      CATCH cx_salv_not_found .                         "#EC NO_HANDLER
*      CATCH cx_salv_existing .                          "#EC NO_HANDLER
*    ENDTRY.
**   Bring the total line to top
*    "lo_aggrs->set_aggregation_before_items( ).
*
*lo_f_label->set_text( 'END-OF-REPORT' ).
**   Online footer
*    MYALV->set_end_of_list( lo_footer ).
**
**   Footer in print
*    MYALV->set_end_of_list_print( lo_footer ).
*
**   set the top of list using the header for Online.
*    MYALV->set_top_of_list( lo_header ).
**
**   set the top of list using the header for Print.
*    MYALV->set_top_of_list_print( lo_header ).
*
*MYCOLUMNS = MYALV->GET_COLUMNS( ).
*MYCOLUMNS->SET_OPTIMIZE( ).
*MYFUNCTIONS = MYALV->GET_FUNCTIONS( ).
*MYFUNCTIONS->SET_ALL( ).
*call method MYALV->DISPLAY.
